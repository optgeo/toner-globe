import "constants.pkl" as constants
import "classes.pkl" as classes

/// MapLibre Toner style configuration - Simplified with modular imports

version = 8
name = "Toner ja"
center = new { 74.5698; 42.8746 }
zoom = 4
bearing = 0
pitch = 0
sources = new {
  ["openmaptiles"] = new {
    ["type"] = "vector"
    ["url"] = "https://tile.openstreetmap.jp/data/planet.json"
  }
}
sprite = "https://tile.openstreetmap.jp/styles/maptiler-toner-en/sprite"
glyphs = "https://tile.openstreetmap.jp/fonts/{fontstack}/{range}.pbf"

layers = new {
  // Background layer
  new {
    ["id"] = "background"
    ["type"] = "background"
    ["paint"] = new {
      ["background-color"] = constants.colors.background
    }
  }
  
  // Water features
  new classes.FillLayer {
    id = "water"
    `source-layer` = "water"
    filter = new {
      "all"
      new { "!="; "brunnel"; "tunnel" }
      new { "=="; "$type"; "Polygon" }
      new { "!="; "intermittent"; 1 }
    }
    paint = new {
      ["fill-antialias"] = true
      ["fill-color"] = constants.colors.water
    }
  }
  
  // Waterway lines
  new classes.LineLayer {
    id = "waterway"
    `source-layer` = "waterway"
    minzoom = 12
    filter = new {
      "all"
      new { "!="; "brunnel"; "tunnel" }
      new { "!="; "class"; "river" }
    }
    paint = new {
      ["line-color"] = constants.colors.waterway
      ["line-width"] = new {
        "step"
        new { "zoom" }
        0.5
        14; 1.5
      }
    }
  }
  
  // Land use features
  new {
    ["id"] = "landcover"
    ["type"] = "fill"
    ["source"] = "openmaptiles"
    ["source-layer"] = "landcover"
    ["maxzoom"] = 14
    ["layout"] = new {
      ["visibility"] = "visible"
    }
    ["paint"] = new {
      ["fill-color"] = new {
        "match"
        new { "get"; "class" }
        "grass"; constants.colors.landcover.grass
        "scrub"; constants.colors.landcover.scrub  
        "wood"; constants.colors.landcover.wood
        "ice"; constants.colors.landcover.ice
        "sand"; constants.colors.landcover.sand
        constants.colors.landcover.default
      }
      ["fill-opacity"] = 1.0
      ["fill-antialias"] = true
    }
  }
  
  // Land use - consolidated (urban areas, parks, detailed landuse)
  new classes.FillLayer {
    id = "landuse_consolidated"
    `source-layer` = "landuse"
    minzoom = 5
    paint = new {
      ["fill-color"] = new {
        "match"
        new { "get"; "class" }
        "residential"; constants.colors.landuse.residential
        "commercial"; constants.colors.landuse.commercial
        "industrial"; constants.colors.landuse.industrial
        "cemetery"; constants.colors.landuse.cemetery
        constants.colors.landuse.default
      }
      ["fill-opacity"] = new {
        "interpolate"
        new { "linear" }
        new { "zoom" }
        5; 0.6
        10; 0.8
        14; 1.0
      }
      ["fill-antialias"] = true
    }
  }

  // Parks - keeping separate for different source-layer
  new classes.FillLayer {
    id = "park"
    `source-layer` = "park"
    minzoom = 6
    paint = new {
      ["fill-color"] = constants.colors.park
      ["fill-opacity"] = new { 
        "step"
        new { "zoom" }
        0.8
        6; 0.6
        14; 0.4
      }
    }
  }
  
  // Railways
  new {
    ["id"] = "rail_tracks"
    ["type"] = "line"
    ["source"] = "openmaptiles"
    ["source-layer"] = "transportation"
    ["minzoom"] = 13
    ["filter"] = new { "all"; new { "=="; "class"; "rail" } }  // Simplified railway filter
    ["layout"] = new {
      ["visibility"] = "visible"
    }
    ["paint"] = new {
      ["line-color"] = new {
        "interpolate"
        new { "linear" }
        new { "zoom" }
        13; constants.tonerColors.gray.light
        17; constants.colors.rail
      }
      ["line-width"] = new {
        "interpolate"
        new { "linear" }
        new { "zoom" }
        13; 0.85
        17; 2
      }
    }
  }
  
  // Railway lines
  new classes.LineLayer {
    id = "rail_base"
    `source-layer` = "transportation"
    minzoom = 13
    filter = new { 
      "all"
      new { "=="; "class"; "rail" }
      new { "!="; "brunnel"; "tunnel" }
    }
    layout = new {
      ["line-cap"] = "butt"  // Override default round for railways
      ["line-join"] = "round"
      ["visibility"] = "visible"
    }
    paint = new {
      ["line-color"] = new {
        "step"
        new { "zoom" }
        constants.tonerColors.gray.light
        14; constants.tonerColors.gray.medium
        17; constants.tonerColors.gray.dark
      }
      ["line-width"] = new {
        "step"
        new { "zoom" }
        0.7
        5; 0.6
        14; 0.4
      }
      ["line-dasharray"] = new { 3; 3 }
    }
  }
  
  // Railway hatching pattern
  new {
    ["id"] = "rail_hatch"
    ["type"] = "line"
    ["source"] = "openmaptiles"
    ["source-layer"] = "transportation"
    ["minzoom"] = 15
    ["filter"] = new { 
      "all"
      new { "=="; "class"; "rail" }
      new { "!="; "brunnel"; "tunnel" }
    }
    ["layout"] = new {
      ["line-cap"] = "butt"
      ["line-join"] = "round"
      ["visibility"] = "visible"
    }
    ["paint"] = new {
      ["line-color"] = constants.colors.rail
      ["line-dasharray"] = new { 0.2; 1.0 }
      ["line-width"] = new {
        "step"
        new { "zoom" }
        2
        17; 4
      }
    }
  }
  
  // Roads - consolidated casing layer
  new classes.LineLayer {
    id = "roads_casing" 
    `source-layer` = "transportation"
    minzoom = 8
    filter = new { 
      "all"
      new { "=="; "$type"; "LineString" }
      new { "in"; "class"; "motorway"; "trunk"; "primary"; "secondary"; "tertiary"; "minor" }
    }
    paint = new {
      ["line-color"] = new {
        "match"
        new { "get"; "class" }
        new { "motorway"; "trunk" }; constants.tonerColors.road.casing
        "primary"; constants.tonerColors.gray.medium
        constants.tonerColors.gray.dark
      }
      ["line-width"] = new {
        "interpolate"
        new { "linear" }
        new { "zoom" }
        8; new { 
          "match"
          new { "get"; "class" }
          new { "motorway"; "trunk" }; 4
          "primary"; 2
          1
        }
        16; new {
          "match"
          new { "get"; "class" }
          new { "motorway"; "trunk" }; 16
          "primary"; 8
          4
        }
      }
    }
  }
  
  // Roads - consolidated center layer
  new classes.LineLayer {
    id = "roads_center"
    `source-layer` = "transportation"
    minzoom = 6
    filter = new { 
      "all"
      new { "=="; "$type"; "LineString" }
      new { "in"; "class"; "motorway"; "trunk"; "primary"; "secondary"; "tertiary"; "minor" }
    }
    paint = new {
      ["line-color"] = new {
        "interpolate"
        new { "linear" }
        new { "zoom" }
        6; new {
          "match"
          new { "get"; "class" }
          new { "motorway"; "trunk" }; constants.tonerColors.gray.light
          "primary"; constants.tonerColors.gray.medium
          constants.tonerColors.gray.dark
        }
        16; new {
          "match"
          new { "get"; "class" }
          new { "motorway"; "trunk" }; constants.tonerColors.road.motorway
          "primary"; constants.tonerColors.road.primary
          constants.tonerColors.road.secondary
        }
      }
      ["line-width"] = new {
        "interpolate"
        new { "linear" }
        new { "zoom" }
        6; new {
          "match"
          new { "get"; "class" }
          new { "motorway"; "trunk" }; 1
          "primary"; 0.75
          0.5
        }
        16; new {
          "match"
          new { "get"; "class" }
          new { "motorway"; "trunk" }; 8
          "primary"; 6
          3
        }
      }
    }
  }
  
  // Buildings
  new {
    ["id"] = "building"
    ["type"] = "fill"
    ["source"] = "openmaptiles"
    ["source-layer"] = "building"
    ["minzoom"] = 13
    ["layout"] = new {
      ["visibility"] = "visible"
    }
    ["paint"] = new {
      ["fill-antialias"] = true
      ["fill-color"] = constants.colors.building
      ["fill-opacity"] = new {
        "interpolate"
        new { "linear" }
        new { "zoom" }
        13; 0.3
        15; 0.6
        17; 0.8
      }
    }
  }
  
  // Administrative boundaries - state/province level
  new {
    ["id"] = "boundary_state"
    ["type"] = "line"
    ["source"] = "openmaptiles"
    ["source-layer"] = "boundary"
    ["minzoom"] = 4
    ["maxzoom"] = 14
    ["filter"] = new { 
      "all"
      new { "=="; "admin_level"; 4 }
      new { "=="; "$type"; "LineString" }
      new { "!="; "maritime"; 1 }
      new { "!="; "disputed"; 1 }
    }
    ["layout"] = new {
      ["line-cap"] = "round"
      ["line-join"] = "round"
      ["visibility"] = "visible"
    }
    ["paint"] = new {
      ["line-color"] = constants.colors.boundary
      ["line-dasharray"] = new { 2; 2 }
      ["line-width"] = new {
        "step"
        new { "zoom" }
        0.5
        6; 0.8
        10; 1.2
        14; 2
      }
    }
  }
  
  // Administrative boundaries - country
  new {
    ["id"] = "boundary_country"
    ["type"] = "line"
    ["source"] = "openmaptiles"
    ["source-layer"] = "boundary"
    ["minzoom"] = 3
    ["filter"] = new { 
      "all"
      new { "=="; "admin_level"; 2 }
      new { "=="; "$type"; "LineString" }
      new { "!="; "maritime"; 1 }
      new { "!="; "disputed"; 1 }
    }
    ["layout"] = new {
      ["line-cap"] = "round"
      ["line-join"] = "round"
      ["visibility"] = "visible"
    }
    ["paint"] = new {
      ["line-color"] = constants.colors.boundaryCountry
      ["line-width"] = new {
        "interpolate"
        new { "linear" }
        new { "zoom" }
        3; 1.0
        8; 2.5
        14; 5.0
      }
      ["line-dasharray"] = new { 3; 2; 1; 2 }
    }
  }
  
  // Place labels - states/provinces
  new {
    ["id"] = "place_state"
    ["type"] = "symbol"
    ["source"] = "openmaptiles"
    ["source-layer"] = "place"
    ["minzoom"] = 4
    ["maxzoom"] = 14
    ["filter"] = new { "all"; new { "=="; "class"; "state" }; new { "=="; "$type"; "Point" } }
    ["layout"] = new {
      ["text-field"] = new {
        "case"
        new { "has"; "name:ja" }
        new { "get"; "name:ja" }
        new { "get"; "name" }
      }
      ["text-font"] = new { "Noto Sans JP Regular"; "Open Sans Regular" }
      ["text-size"] = new {
        "interpolate"
        new { "linear" }
        new { "zoom" }
        4; 10
        8; 12
        12; 14
      }
      ["text-transform"] = "uppercase"
      ["visibility"] = "visible"
      ["text-anchor"] = "center"
      ["text-max-width"] = 10
    }
    ["paint"] = new {
      ["text-color"] = constants.tonerColors.text.stateText
      ["text-halo-color"] = constants.tonerColors.text.halo
      ["text-halo-width"] = 1.5
    }
  }

  // Place labels - cities
  new {
    ["id"] = "place_city"
    ["type"] = "symbol"
    ["source"] = "openmaptiles"
    ["source-layer"] = "place"
    ["minzoom"] = 7
    ["filter"] = new { "all"; new { "=="; "class"; "city" }; new { "=="; "$type"; "Point" } }
    ["layout"] = new {
      ["text-field"] = new {
        "case"
        new { "has"; "name:ja" }
        new { "get"; "name:ja" }
        new { "get"; "name" }
      }
      ["text-font"] = new { "Noto Sans JP Regular"; "Open Sans Regular" }
      ["text-size"] = new {
        "interpolate"
        new { "linear" }
        new { "zoom" }
        7; 10
        10; 12
        14; 16
      }
      ["text-transform"] = "none"
      ["visibility"] = "visible"
      ["text-anchor"] = "center"
      ["text-offset"] = new { 0; 0 }
      ["text-max-width"] = 8
    }
    ["paint"] = new {
      ["text-color"] = constants.tonerColors.text.cityText
      ["text-halo-color"] = constants.tonerColors.text.halo
      ["text-halo-width"] = 1.5
    }
  }
  
  // Place labels - countries (最優先表示)
  new {
    ["id"] = "place_country"
    ["type"] = "symbol"
    ["source"] = "openmaptiles"
    ["source-layer"] = "place"
    ["minzoom"] = 2
    ["filter"] = new { "all"; new { "=="; "class"; "country" }; new { "=="; "$type"; "Point" } }
    ["layout"] = new {
      ["text-field"] = new {
        "case"
        new { "has"; "name:ja" }
        new { "get"; "name:ja" }
        new { "get"; "name" }
      }
      ["text-font"] = new { "Noto Sans JP Bold"; "Open Sans Bold" }
      ["text-size"] = new {
        "interpolate"
        new { "linear" }
        new { "zoom" }
        2; 8.0       // 最小サイズを8に設定
        4; 12.5      // ズームレベル4でのサイズを保持
        5; 13.2
        7; 20
      }
      ["text-transform"] = "none"
      ["visibility"] = "visible"
      ["text-anchor"] = "center"
      ["text-max-width"] = 10
      ["text-padding"] = 2
      ["text-allow-overlap"] = true
      ["text-ignore-placement"] = true
      ["symbol-sort-key"] = 1
    }
    ["paint"] = new {
      ["text-color"] = new {
        "interpolate"
        new { "linear" }
        new { "zoom" }
        1; "rgba(0, 0, 0, 0.0)"      // 最低ズームレベルでは透明
        4; constants.tonerColors.text.countryText    // 黒で国名を強調
        18; constants.tonerColors.text.countryText   // 高ズームレベルでも黒
      }
      ["text-halo-color"] = constants.tonerColors.text.haloSolid
      ["text-halo-width"] = new {
        "interpolate"
        new { "linear" }
        new { "zoom" }
        2; 1.0
        4; 1.3
        5; 1.2
        7; 2.4
      }
    }
  }
  
  // Building polygons
  new {
    ["id"] = "building_polygons"
    ["type"] = "fill"
    ["source"] = "openmaptiles"
    ["source-layer"] = "building"
    ["minzoom"] = 16
    ["layout"] = new {
      ["visibility"] = "visible"
    }
    ["paint"] = new {
      ["fill-antialias"] = true
      ["fill-color"] = constants.tonerColors.transparent.dark
      ["fill-opacity"] = new {
        "interpolate"
        new { "linear" }
        new { "zoom" }
        16; 0.3
        18; 0.8
      }
      ["fill-outline-color"] = constants.tonerColors.text.primary
    }
  }
}
