/// Base layer definitions and common types
module toner.layers.Base

/// Base layer class
abstract class Layer {
  id: String
  type: String
  source: String?
  `source-layer`: String?
  minzoom: Int?
  maxzoom: Int?
  filter: Any?
  layout: Mapping<String, Any>?
  paint: Mapping<String, Any>?
  metadata: Mapping<String, Any>?
}

/// Background layer type
class BackgroundLayer extends Layer {
  type = "background"
  source = null
  `source-layer` = null
}

/// Fill layer type
class FillLayer extends Layer {
  type = "fill"
}

/// Line layer type  
class LineLayer extends Layer {
  type = "line"
}

/// Symbol layer type
class SymbolLayer extends Layer {
  type = "symbol"
}

/// Common paint properties for fill layers
class FillPaint {
  `fill-color`: Any?
  `fill-opacity`: Any?
  `fill-outline-color`: Any?
  `fill-antialias`: Boolean?
  `fill-pattern`: String?
}

/// Common paint properties for line layers
class LinePaint {
  `line-color`: Any?
  `line-width`: Any?
  `line-opacity`: Any?
  `line-dasharray`: Any?
  `line-blur`: Any?
}

/// Common layout properties for line layers
class LineLayout {
  `line-cap`: String?
  `line-join`: String?
  visibility: String?
}

/// Common paint properties for symbol layers
class SymbolPaint {
  `text-color`: Any?
  `text-halo-color`: Any?
  `text-halo-width`: Any?
  `text-halo-blur`: Any?
  `icon-translate`: Any?
}

/// Common layout properties for symbol layers
class SymbolLayout {
  `text-field`: String?
  `text-font`: Any?
  `text-size`: Any?
  `text-max-width`: Any?
  `text-anchor`: String?
  `text-transform`: String?
  `text-letter-spacing`: Any?
  `text-rotation-alignment`: String?
  `text-pitch-alignment`: String?
  `text-keep-upright`: Boolean?
  `text-allow-overlap`: Boolean?
  `text-ignore-placement`: Boolean?
  `text-padding`: Any?
  `text-line-height`: Any?
  `symbol-placement`: String?
  `symbol-spacing`: Any?
  `icon-anchor`: String?
  visibility: String?
}

/// Zoom stop for expressions
class ZoomStop {
  zoom: Number
  value: Any
}

/// Creates a stops expression from zoom stops
function createStops(stops: List<ZoomStop>): Mapping<String, Any> = new Mapping {
  ["stops"] = stops.map((stop) -> new List { stop.zoom; stop.value })
}
